{{- if .Values.s3.enabled }}
---
apiVersion: "v1"
kind: "Secret"
metadata:
  name: "{{ include "common.names.fullname" . }}-s3"
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data: # reset data to make sure only keys defined below remain
stringData:
  OPENPROJECT_ATTACHMENTS__STORAGE: fog
  OPENPROJECT_FOG_CREDENTIALS_PROVIDER: AWS
  {{- if not .Values.s3.auth.existingSecret }}
  OPENPROJECT_FOG_CREDENTIALS_AWS__ACCESS__KEY__ID: {{ .Values.s3.auth.accessKeyId }}
  OPENPROJECT_FOG_CREDENTIALS_AWS__SECRET__ACCESS__KEY: {{ .Values.s3.auth.secretAccessKey }}
  {{- end }}

  {{ if .Values.s3.endpoint -}}
  OPENPROJECT_FOG_CREDENTIALS_ENDPOINT: {{ .Values.s3.endpoint }}
  {{- end }}
  {{ if .Values.s3.host -}}
  OPENPROJECT_FOG_CREDENTIALS_HOST: {{ .Values.s3.host }}
  {{- end }}
  {{ if .Values.s3.port -}}
  OPENPROJECT_FOG_CREDENTIALS_PORT: "{{ .Values.s3.port }}"
  {{- end }}
  OPENPROJECT_FOG_DIRECTORY: {{ .Values.s3.bucketName }}
  OPENPROJECT_FOG_CREDENTIALS_REGION: {{ .Values.s3.region }}
  OPENPROJECT_FOG_CREDENTIALS_PATH__STYLE: "{{ .Values.s3.pathStyle }}"
  OPENPROJECT_FOG_CREDENTIALS_AWS__SIGNATURE__VERSION: "{{ .Values.s3.signatureVersion }}"
  # remove use_iam_profile fallback after some point
  OPENPROJECT_FOG_CREDENTIALS_USE__IAM__PROFILE: {{ if or .Values.s3.use_iam_profile .Values.s3.useIamProfile }}"true"{{else}}"false"{{end}}
  OPENPROJECT_FOG_CREDENTIALS_ENABLE__SIGNATURE__V4__STREAMING: {{ if .Values.s3.enableSignatureV4Streaming }}"true"{{else}}"false"{{end}}
  OPENPROJECT_DIRECT__UPLOADS: {{ if .Values.s3.directUploads }}"true"{{else}}"false"{{end}}
...
{{- end }}
