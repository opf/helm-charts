# Example values.yaml for OpenProject with HPA autoscaling enabled
# This demonstrates both resource-based and custom metrics scaling

# Enable HPA autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 20

  # Resource-based scaling (fallback when custom metrics unavailable)
  # targetCPUUtilizationPercentage: 70

  # Custom metrics scaling based on puma_request_backlog
  customMetrics:
    # Scale when request backlog exceeds 2 requests over 1 minute average
    # This means if backlog > 2 requests, scale up
    - type: Pods
      pods:
        metric:
          name: puma_request_backlog_avg_1min
        target:
          type: AverageValue
          averageValue: "2"  # Scale up when backlog > 2 requests

    - type: Pods
      pods:
        metric:
          name: puma_busy_threads_avg_1min
        target:
          type: AverageValue
          averageValue: "1"  # Scale up when busy threads > 2

  # Advanced scaling behavior for production workloads
  behavior:
    scaleDown:
      # Wait 5 minutes before scaling down to avoid flapping
      stabilizationWindowSeconds: 300
      policies:
      # Scale down by at most 1 pod per minute
      - type: Pods
        value: 1
        periodSeconds: 60
      # Or scale down by at most 10% per minute
      - type: Percent
        value: 10
        periodSeconds: 60
      # Choose the policy that results in fewer pods being removed
      selectPolicy: Min
    scaleUp:
      # Wait 1 minute before scaling up for faster response
      stabilizationWindowSeconds: 60
      policies:
      # Scale up by at most 2 pods per minute
      - type: Pods
        value: 2
        periodSeconds: 60
      # Or scale up by at most 50% per minute
      - type: Percent
        value: 50
        periodSeconds: 60
      # Choose the policy that results in more pods being added
      selectPolicy: Max

# Enable metrics collection for Prometheus scraping
metrics:
  enabled: true
  path: "/metrics"
  port: 9394

  # Enable ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: true
    namespace: monitoring
    # interval: "30s"
    # scrapeTimeout: "10s"
    # labels:
      # release: prometheus  # Match your Prometheus Operator release labels

appInit:
  resources:
    limits:
      memory: "1Gi"
    requests:
      memory: "1Gi"

image:
  repository: openproject/openproject-test
  tag: prome

environment:
  RAILS_MAX_THREADS: 1
  RAILS_MIN_THREADS: 1