# frozen_string_literal: true

require 'spec_helper'
require 'base64'

describe 'rails secret key configuration' do
  let(:template) { HelmTemplate.new(default_values) }

  let(:env_from) do
    web_deployment = template.dig('Deployment/optest-openproject-web')
    web_deployment.dig('spec', 'template', 'spec', 'containers', 0, 'envFrom')
  end

  context 'autogenerated secret key' do
    let(:default_values) do
      {}
    end

    let(:secret_key_data) do
      template.dig('Secret/optest-openproject-rails-secret-key', 'data')
    end

    let(:rails_secret) do
      env_from.select { |item| item.dig('secretRef', 'name')&.include?('rails-secret-key') }
    end

    it 'has rails secret key' do
      expect(secret_key_data).to include 'SECRET_KEY_BASE'

      secret_key_len = Base64.decode64(secret_key_data['SECRET_KEY_BASE']).length
      expect(secret_key_len).to eq 64
    end

    it 'uses autogenerated secret key in container' do
      expect(rails_secret).to contain_exactly(
        { 'secretRef' => { 'name'=>'optest-openproject-rails-secret-key' } }
      )
    end
  end

  context 'existing secret key' do
    let(:default_values) do
      HelmTemplate.with_defaults(<<~YAML
        openproject:
          railsSecretKey:
            enabled: true
            existingSecret: my-rails-key
      YAML
      )
    end

    let(:rails_secret) do
      env_from.select { |item| item.dig('secretRef', 'name')&.include?('my-rails-key') }
    end

    it 'uses existing secret key in container' do
      expect(rails_secret).to contain_exactly(
        { 'secretRef' => { 'name'=>'my-rails-key' } }
      )
    end
  end

  context 'disabled secret' do
    let(:default_values) do
      HelmTemplate.with_defaults(<<~YAML
        openproject:
          railsSecretKey:
            enabled: false
            existingSecret: my-rails-key
      YAML
      )
    end

    it 'uses rails secret key in container' do
      expect(env_from).not_to include(
        'secretRef' => { 'name' => 'my-rails-key' }
      )

      expect(env_from).not_to include(
        'secretRef' => { 'name'=>'optest-openproject-rails-secret-key' }
      )
    end
  end
end
